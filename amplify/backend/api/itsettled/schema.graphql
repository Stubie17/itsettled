type Query {
  user: User @function(name: "itsettledUserFunction-${env}")
}

type Item @model @key(name: "byItem", fields: ["id"]) @auth(rules: [{ allow: owner, operations: [create, delete] }]) {
  id: ID!
  name: String!
  detail: String!
  votes: Int!
  comments: [Comment] @connection(keyName: "byItem", fields: ["id"])
}

type Comment @model @key(name: "byItem", fields: ["itemID", "content"]) @auth(rules: [{ allow: owner, operations: [create, delete] }]) {
  id: ID!
  itemID: ID!
  item: Item @connection(fields: ["itemID"])
  content: String!
}
type User {
  Username: String!
  UserAttributes: [Value]
  UserCreateDate: String
  UserLastModifiedDate: String
  Enabled: Boolean
  UserStatus: UserStatus
  MFAOptions: [MFAOption]
  PreferredMfaSetting: String
  UserMFASettingList: String
}
type Value {
  Name: String!
  Value: String
}
type MFAOption {
  DeliveryMedium: String
  AttributeName: String
}
enum UserStatus {
  UNCONFIRMED
  CONFIRMED
  ARCHIVED
  COMPROMISED
  UNKNOWN
  RESET_REQUIRED
  FORCE_CHANGE_PASSWORD
}